a.out
history.txt
Parser.c
temp.txt
u.txt
eadline/history.h>
char* myread(char* line)
	line = readline(prompt);
		return line;
		return NULL;
int mysplit(char* line, char* delimiter, char* result[100])
	result[0]= strtok(line,delimiter);
		result[index] = aux;
	return index;
		   return -1;
  	return fd1;
	   rename("temp1.txt","temp.txt");
			 		//redirigir dependiendo del caso.
			 			while(read(n,&buffer,1))
int resolvecd(char* result[])
	if(strcmp(result[1],".") == 0)
		return 0;
	int error = chdir(result[1]);
		return 0;
    printf("%s\n","No such file or directory");
	return 1;
	return 0;
	return 0;
int resolvexpression(char* expresion, char* result[100], int havepipes, int pipes[100][2], int p1, int p2, int pos, int p3)
	char* temp = (char*)malloc(sizeof(expresion));
	char* aux = (char*)malloc(sizeof(expresion));
	char* parchemenor = (char*)malloc(sizeof(expresion));
	int resultlenght = 0;
	for (int i = 0; i < strlen(expresion); i++)
		temp[i] = (char)expresion[i];
		if((i+1) >= strlen(expresion))
			resultlenght = mysplit(temp, " ", result);
			if(strcmp(result[0],"cd") == 0)
				resolvecd(result);
				free(temp);
				return 0;
			else if (strcmp(result[0],"history") == 0)
				load_history(result[0]);
				free(temp);
				return 0;
			else if(strcmp(result[0],"clhistory") == 0)
				return 0;
				myexecv(result,resultlenght,-1,-1,0,1,pipes,p1,p2,pos,p3,aux,filename,first,last);
				free (temp);
				return 0;
				myexecv(result,resultlenght,-1,1,0,0,pipes,p1,p2,pos,p3,aux,filename,first,last);
				free(temp);
				return 0;
		else if ((char)expresion[i+1] == (char)'>' && (i+2) < strlen(expresion))
			if((char)expresion[i+2] == (char)'>')
			resultlenght = mysplit(temp," ", result);
			for (int j = i+2; j < strlen(expresion); j++)
				if((char)expresion[j] != (char)' ' && (char)expresion[j] != (char)'>')
				   	aux[index] = (char)expresion[j];
				if ((j+1) >= strlen(expresion))
		            myexecv(result,resultlenght,fd1,-1, 0,-9,pipes,p1,p2,pos,p3,aux,filename,first,last);
		              myexecv(result,resultlenght,fd1,-1, 0,-9,pipes,p1,p2,pos,p3,aux,filename,first,last);
					return 0;					
				else if ((char)expresion[j+1] == (char)'>' && (char)expresion[j+2] == (char)'>')
				else if ((char)expresion[j+1] == (char)'>')
				else if ((char)expresion[j+1] == (char)'<')
		else if((char)expresion[i+1] == (char)'<' && (i+2) < strlen(expresion))
				resultlenght = mysplit(temp," ", result);
				for (int j = i+2; j < strlen(expresion); j++)
					if((char)expresion[j] != (char)' ')
					   	aux[index] = (char)expresion[j];
					   if ((j+1) >= strlen(expresion))
				             		myexecv(result,resultlenght,1,-1,4,0,pipes,p1,p2,pos,p3,aux,filename,first,last);
				             		return 0;
			               			myexecv(result,resultlenght,1,-1,4,0,pipes,p1,p2,pos,p3,aux,filename,first,last);
				             		return 0;			               			
			               			myexecv(result,resultlenght,1,-1,4,0,pipes,p1,p2,pos,p3,aux,filename,first,last);
				             		return 0;			               			
						else if ((char)expresion[j+1] == (char)'>' && first == 0)
							if ((char)expresion[j+2] == (char)'>')
						else if ((char)expresion[j+1] == (char)'>' && (char)expresion[j+2] == (char)'>')
						else if ((char)expresion[j+1] == (char)'>')
	return 0;
int resolve(char* expresion, char* result[100])
	int count_process = mysplit(expresion,"|",result);
				resolvexpression(result[i],operations,havepipes,pipes,p1,p2,-3,p3);
				resolvexpression(result[i],operations,havepipes,pipes,p1,p2,-2,p3);
				resolvexpression(result[i],operations,havepipes,pipes,p1,p2,-1,p3);
		resolvexpression(result[0],operations,0,pipes,p1,p2,3,p3);
	return 0;
	char*result[100];
	while(strcmp(line = myread(line),"exit") != 0)
            resolve(line,result);
   return 0;
